https://www.codepile.net/pile/n8DnbK7A

// Punkt 4
bool PoprawnaRóżnica = true;
int pomocnicza=0;
int roznica;
int i = 0;
while (i < N)
// 0 <= i <= N 
// PoprawnaRóżnica = true 
// -1 <= pomocnicza <= 0
// 0 <= C[j] < b dla każdego j \in [0..i-1]
// 0 <= A[k] < b, 0<=B[k]<b   0<=k<=N-1
// C[0 .. i-1] = A[0...i-1] - B[0...i-1] - pomocnicza*b^i 
{
    roznica = A[i]-B[i]+pomocnicza;
    if (roznica < 0)
    {
        C[i] = roznica + b;
        pomocnicza = -1;
    }
    else
    {
        C[i] = roznica;
        pomocnicza = 0;
    }
    i = i + 1;
}
if (pomocnicza<0)
{
    PoprawnaRoznica = false;
}


bool PoprawnaRóżnica(int A[], int B[], int C[]) {
    int pomocnicza = 0;
    int roznica;
    int i = 0;
    while (i < N) {
        roznica = A[i] - B[i] + pomocnicza;
        if (roznica < 0) {
            C[i] = roznica + b;
            pomocnicza = -1;
        }
        else {
            C[i] = roznica;
            pomocnicza = 0;
        }
        i = i + 1;
    }
    if (pomocnicza < 0) {
        return false;
    }
    else {
        return true;
    }
}
// int D1[N];
// int D2[N];
// inicjalizacja D1, D2
// bool w;
// w = PoprawnaRoznica(D1,D1,D1); //będzie OK

// Punkt 5 - iloczyn liczb wielocyfrowych

5. void Iloczyn(int A[], int B[], int D[]) {
//Wynik iloczynu A i B jest zapisywany w D; D jest odpowiednio długie - A i B mają długość N, D  ma długość 2*N
// int D[2*N];
    for (int i=0; i<2*N; i++) {
        D[i] = 0;
    }
    
    int wynik;
    int pomocnicza;
    for (int i=0; i<N; i++){
        // 0 <= i <= N;
        // 0 <= A[k] < b dla k \in [0, N-1]
        // 0 <= B[k] < b dla k \in [0, N-1]
        // 0 <= D[k] < b dla k \in [0, 2N-1]
        // D[0...2N-1] = A[0...i-1]*B[0..N-1]
        pomocnicza = 0;
        for (int j=0; j<N; j++) {
            // 0 <= j <= N;
            // 0 <= i <= N-1;
            // 0 <= A[k] < b dla k \in [0, N-1]
            // 0 <= B[k] < b dla k \in [0, N-1]
            // 0 <= D[k] < b dla k \in [0, 2N-1]
            // D[0...2N-1] = A[0...i-1] * B[0..N-1] + A[i] * B[0...j-1] * b^i + pomocnicza*b^{i+j}
            // 0 <= pomocnicza < b 
            wynik = (A[i] * B[j]) + pomocnicza + D[i+j];
            D[i+j] = wynik % b;
            pomocnicza = wynik / b;
        }
        D[i+N] = pomocnicza;
    }
}

Zadanie o następnej permutacji: w tablicy A[N] znajduje się zapis N-elementowej, nienajwiększej permutacji. Wyznacz kolejną. 


N = 3 

1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1

7 2 1 5 4 3 6 
7 2 1 5 4 6 3


                      7 5 1 3 6 4 2 
po zamianie 3 i 4 :   7 5 1 4 6 3 2 
po reverse na ogonie: 7 5 1 4 2 3 6


zadanie domowe:

#include <stdio.h>



void next_permutation(int A[], int B[], int N) {
    int i = N-2;
    while (A[i] >= A[i+1]) {
        i--;
    }

    int j = N-1;
    while (A[i] >= A[j]) {
        j--;
    }

    for (int k=0; k<N; k++) {
        if (k == j) {
            B[j] = A[i];
        }
        else if (k == i) {
            B[k] = A[j];
        }
        else {
            B[k] = A[k];
        }
    }
    int pomocnicza;
    for (int k=1; k<=(N-1-i)/2; k++) {
        pomocnicza = B[i+k];
        B[i+k] = B[N-k];
        B[N-k] = pomocnicza;
    }
}

int main() {
    int N;
    int A[N];
    int B[N];
    scanf("%d", &N);
    for (int i=0; i<N; i++) {
        scanf("%d", &A[i]);
    }
    next_permutation(A, B, N);
    for (int i=0; i<N; i++) {
        printf("%d", B[i]);
    }
    return 0;
}
