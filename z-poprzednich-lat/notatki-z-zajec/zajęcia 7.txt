https://www.codepile.net/pile/A8wArDz1

W tablicy A[N] znajduje się zapis N-elementowej, nienajwiększej permutacji. Wyznacz kolejną. 


N = 3 

1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1

Przkład dla:
7 2 1 5 4 3 6 
następna permutacja to:
7 2 1 5 4 6 3


7 5 1 3 6 4 2 po zamianie 3 i 4 :
7 5 1 4 6 3 2 po reverse na ogonie za 4:
7 5 1 4 2 3 6

void next_permutation(int A[], int N) {
    int i = N-2;
    while (A[i] >= A[i+1]) {// brak wyjścia poza zakres bo permutacja nie jest największa
        i--;
    }
    // A[i] pierwszy element po ronącym od końca ogonie
    int j = N-1;
    while (A[i] >= A[j]) {
        j--;
    }
    // A[j] pierwszy od końca element większy od A[i], j<>i 
    

   
    int temp;
    
    temp = A[i];
    A[i] = A[j];
    A[j] = temp;
    
    for (int k=1; k<=(N-1-i)/2; k++) {
        temp = A[i+k];
        A[i+k] = A[N-k];
        A[N-k] = temp;
    }
    
/*   int l, p;
    l=i+1; p=N-1;
    while (l<p)
    {
    temp = A[l];
    A[l] = A[p];
    A[p] = temp;    
    l++;
    p--;
    }
*/    
}
Zad (Segment o maksymalnej sumie)
Napisz funkcję znajdującą w zadanej tablicy liczb całkowitych A rozmiaru N, N > 0, maksymalną sumę segmentu 
(spójnego fragmentu tablicy). Przyjmujemy, że segment pusty ma sumę 0.



:(


https://www.codepile.net/pile/egbRwXg7

Zad (Segment o maksymalnej sumie)
Napisz funkcję znajdującą w zadanej tablicy liczb całkowitych A rozmiaru N, N > 0, maksymalną sumę segmentu 
(spójnego fragmentu tablicy). Przyjmujemy, że segment pusty ma sumę 0.

-3 -4 6 10 -1 17
      ----------- 
      p           k
      
      wtedy segment pusty ma p=k, segment jednoelementowy ma k=p+1 

int segment = 0;
int maks_segment = 0;
int pocz_aktual = 0, 
int kon_aktual = 0;
int pocz_maks = 0, kon_maks = 0;
while(kon_aktual<=N-1) //0<=kon_aktual<=N-1
{
    //0<=pocz_aktual<=N-1
    //maks_segment - maksymalna suma segmentu od 0 do kon_aktual ale bez kon_aktual, którego każdy odcinek początkowy ma sumę nieujemną
    //segment - suma najdłuższego segmentu, którego każdy odcinek początkowy ma sumę większą od 0 do kon_aktual-1, poczn_aktual to jego początek
    //maks_segment jest wyznaczony dobrze przez zerowanie zmiennej segment w linii 18-19 w przypadku na natrafienie liczby która powoduje, że segment <=0
    
    segment = segment + A[kon_aktual];
    kon_aktual += 1;
   
    if(segment<=0) {
        segment=0;
        pocz_aktual = kon_aktual;
        
    }
    // segment jest nieujemny  

    else if (segment>maks_segment) {
        maks_segment=segment;
        pocz_maks = pocz_aktual;
        kon_maks = kon_aktual;
        
    } 
}



// kwadratowa
int segment;
int maks_segment = 0;
for (int i=0; i<N; i++) {
    // 0 <= i <= N
    // maks_segment >= 0
    // maks_segment - maksymalna wartość segmentów zaczynających sie przed i
    segment = 0;
    for (int j=i; j<N; j++) {
        // 0 <= i <= j <= N
        // maks_segment >= 0
        // segment - wartośc segmentu zaczynającego się w i i kończacego w j-1
        // maks_segment - maksymalna wartość segmentów zaczynających się w i i kończących do j-1
        segment += A[j];
        if (segment > maks_segment) {
            maks_segment = segment;
        }
    }
}














